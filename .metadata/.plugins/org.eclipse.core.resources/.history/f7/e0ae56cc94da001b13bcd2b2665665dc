package com.brunobirck.usersapi.api.controller;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.brunobirck.usersapi.api.model.UserDTO;
import com.brunobirck.usersapi.domain.model.User;
import com.brunobirck.usersapi.domain.service.UserService;

@RestController
@RequestMapping("/users")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@GetMapping
	public List<User> getUsers() {
		return userService.findUsers();
	}
	
	@GetMapping("/{id}")
	public User getUser(@PathVariable Long id) {
		return userService.findUser(id);
	}
	
	@PostMapping
	@RequestMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public UserDTO createUser(@RequestPart UserDTO user, @RequestPart MultipartFile photo) {
		System.out.println(photo);
		return this.getDTOFromEntity(userService.save(this.getEntityFromDTO(user)));
	}
	
	@PutMapping("/{id}")
	public User updateUser(@PathVariable Long id, @RequestBody User user) {
		User userFinded= userService.findUser(id);
		BeanUtils.copyProperties(user, userFinded, "id");
		return userService.save(userFinded);
	}

	@DeleteMapping("/{id}")
	public void removeUser(@PathVariable Long id) {
		userService.deleteUser(id);
	}
	
	private User getEntityFromDTO (UserDTO dto) {
		return modelMapper.map(dto, User.class);
	}
	
	private UserDTO getDTOFromEntity (User user) {
		return modelMapper.map(user, UserDTO.class);
	}
}
